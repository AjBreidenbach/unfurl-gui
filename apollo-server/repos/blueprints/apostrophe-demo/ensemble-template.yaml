# unfurl -v --home '' export --format blueprint ensemble-template.yaml > blueprint.json
apiVersion: unfurl/v1alpha1
kind: Ensemble
spec:
  inputs:
      # added to cloud init
    env_url: {get_env: CI_API_URL}
    env_token: {get_env: CI_TOKEN}
    image: {get_env: CI_REGISTRY_IMAGE}
    domain: foo.com

  deployment_blueprints:
    gcp:
      title: Google Cloud Platform
      cloud: unfurl.relationships.ConnectsTo.GoogleCloudProject
    aws:
      title: Amazon Web Services EC2
      cloud: unfurl.relationships.ConnectsTo.AWSAccount        
    k8s:
      title: Kubernetes
      cloud: unfurl.relationships.ConnectsTo.K8sCluster        
    selfhosted:  
      title: Self-Hosted
      cloud: null

# Requirements:
# - source -> artifact
# - compute (ec2 / gcp / kubernetes )
# - MongoDB (self-hosted / amazon / atlas)
# - dns (route53 / godaddy / googledns )
  service_template:
    metadata:
      template_name: Apostrophe Demo
      livePreview: https://demo-apostrophe-demo.dev3.unfurl.cloud/
      image: https://unfurl.cloud/demo/apostrophe-demo/-/raw/dc4b22d93e34ef232573f5a4223d0e76b8a92433/.unfurl/Screen_Shot_2021-09-15_at_1.02.07_PM.png
      sourceCodeUrl: https://github.com/aszs/apostrophe-sandbox.git
      deployments: 164
      webUrl: https://github.com/aszs/apostrophe-sandbox
    imports:
    - repository: unfurl
      file: tosca_plugins/googlecloud.yaml

    relationship_types:
      Mail:
        derived_from: tosca.relationships.Root
        description: Mail server to use for sending mail (optional)
        metadata:
          title: Mail Server
          badge: MAIL

      SendGrid:
        derived_from: Mail
        interfaces:
          Configure:
            configure: echo "configured"

    node_types:
      Base:
        derived_from: tosca.nodes.Root
        interfaces:
          Standard:
            configure: echo "configured"

      Compute:
        derived_from: Base
        metadata:
          badge: COMPUTE
        properties:
          CPUs:
            type: integer
          Memory:
            type: number
          storage:
            type: number

      AWSInstance:
        derived_from: [Compute, unfurl.nodes.AWSResource]

      GCPInstance:
        derived_from: [Compute, unfurl.nodes.GoogleCloudObject]

      MongoDb:
        derived_from: Base
        metadata:
          badge: Database

      Atlas:
        derived_from: MongoDb
        metadata:
          title: Atlas MongoDB Service
        properties:
          login:
            type: string
          password:
            metadata:
              sensitive: true
            type: string

      SelfHosted_MongoDb:
        derived_from: MongoDb
        metadata:
          title: Self-hosted MongoDB
        requirements:
        - host: Compute

      DNS:
        derived_from: Base
        description: DNS provider for domain name configuration
        metadata:
          badge: DNS

      DockerHost:
        derived_from: Compute

      MEANStack:
        derived_from: Base
        properties:
          container_image:
            type: string
          domain:
            type: string
            description: The domain name to associate this application with.
        attributes:
          admin_password: 
            type: string
            metadata:
              sensitive: true
            description: The autogenerated password for admin access.
        requirements:
        - host:
            description: A compute instance with at least 512MB RAM
            node: Compute
        - resolver:
            node: DNS
        - db:
            node: MongoDb
            description: MongoDB database service
        - mail:
            node: Mail

    topology_template:
      inputs:
        domain:
          type: string
          description: the domain

      substitution_mappings:
          node: the_app

      node_templates:
        # foo.com-zone:
        #   type: DNS
        #   properties:
        #     domain: foo.com

        the_app:
          type: MEANStack
            # artifact:
            #   source: the_app
            # Standard:
            #   configure: docker build
          properties:
            container_image: the_app_image
            domain: {get_input: domain}
          # requirements:
          # - host: app_container
          # - resolver: foo.com-zone
          # - db: atlas_service
            

        app_container:
          type: DockerHost
          artifacts:
            image: the_app_image
          properties:
            CPUs: 2
            Memory: 512
            storage: 200

        atlas_service:
          type: Atlas
          properties:
            login: admin
            password: '*******'

        # an_ec2:
        #   type: AWSInstance
